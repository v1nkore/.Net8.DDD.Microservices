// <auto-generated />

#nullable disable

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using TodoService.Infrastructure.Data;

namespace TodoService.Infrastructure.Migrations.TodoWrite
{
    [DbContext(typeof(TodoWriteContext))]
    [Migration("20240225182055_Fix_EisenhowerMatrix_Complex_Type_Naming")]
    partial class FixEisenhowerMatrixComplexTypeNaming
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TodoService.Domain.Aggregates.TodoAggregate.Space", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_space");

                    b.ToTable("space", (string)null);
                });

            modelBuilder.Entity("TodoService.Domain.Aggregates.TodoAggregate.Todo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parentId");

                    b.Property<Guid?>("SpaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("spaceId");

                    b.ComplexProperty<Dictionary<string, object>>("EisenhowerMatrix", "TodoService.Domain.Aggregates.TodoAggregate.Todo.EisenhowerMatrix#EisenhowerMatrix", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("IsImportant")
                                .HasColumnType("boolean")
                                .HasColumnName("is_important");

                            b1.Property<bool>("IsUrgent")
                                .HasColumnType("boolean")
                                .HasColumnName("is_urgent");
                        });

                    b.HasKey("Id")
                        .HasName("pK_todo");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("iX_todo_parentId");

                    b.HasIndex("SpaceId")
                        .HasDatabaseName("iX_todo_spaceId");

                    b.ToTable("todo", (string)null);
                });

            modelBuilder.Entity("TodoService.Domain.Aggregates.TodoAggregate.Todo", b =>
                {
                    b.HasOne("TodoService.Domain.Aggregates.TodoAggregate.Todo", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fK_todo_todo_parentId");

                    b.HasOne("TodoService.Domain.Aggregates.TodoAggregate.Space", null)
                        .WithMany("Todo")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fK_todo_space_spaceId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TodoService.Domain.Aggregates.TodoAggregate.Space", b =>
                {
                    b.Navigation("Todo");
                });

            modelBuilder.Entity("TodoService.Domain.Aggregates.TodoAggregate.Todo", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
